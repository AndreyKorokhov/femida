#!/usr/bin/env python3

import pymongo.errors
import argparse
import os
import logging
import persistqueue
from femida_detect.utils import setup_rs


STATUS_ERROR = 'OCR errored'
STATUS_COMPLETE = 'OCR complete'
STATUS_IN_QUEUE = 'in queue for OCR'
STATUS_PARTIALLY_COMPLETE = 'OCR partially complete'


parser = argparse.ArgumentParser()
PDFS = 'pdfs'
DB = 'femida'

parser.add_argument('--host', type=str, default='localhost')
parser.add_argument('--port', type=int, default=27017)
parser.add_argument('--log-to', type=str,
                    help='path to logfile')
parser.add_argument('--root', type=str, required=True,
                    help='path to local queue')
parser.add_argument('--max-errors', type=int, default=1)
parser.add_argument('--critical-errors', type=int, default=2)
parser.add_argument('--debug', action='store_true')
logger = logging.getLogger('status :: updater')


def finalize(t, pdfs, pdf_status):
    """
    This should be only called if the result is ready to submit
    This is also should be called with lock
    """
    if t['result']['status'] == 'error':
        logger.debug(f"got status error: {t['_id']} :: {str({t['i']})}")
        pdf_status[t['UUID']] |= {t['i'], -t['i']}
    else:
        logger.debug(f"got status normal: {t['_id']} :: {str({t['i']})}")
        pdf_status[t['UUID']] |= {t['i']}
    all_tasks = set(range(1, t['total']+1))
    complete_and_errors = pdf_status[t['UUID']]
    # some tasks are left
    if len(all_tasks - complete_and_errors):
        logger.debug(f"No update for task _id={t['_id']}")
        update = None
    # there are some errors
    elif len(complete_and_errors - all_tasks) > 0:
        if len(complete_and_errors - all_tasks) < t['total']:
            logger.info(f"Task _id={t['_id']} :: status :: {STATUS_PARTIALLY_COMPLETE}")
            update = {'$set': {'status': STATUS_PARTIALLY_COMPLETE}}
        else:
            logger.info(f"Task _id={t['_id']} :: status :: {STATUS_ERROR}")
            update = {'$set': {'status': STATUS_ERROR}}
    # it's all good
    else:
        logger.info(f"Task _id={t['_id']} :: status :: {STATUS_COMPLETE}")
        update = {'$set': {'status': STATUS_COMPLETE}}
    if update:
        pdfs.update_one(
            {'_id': t['_id']},
            update
        )
    if update:
        try:
            del pdf_status[t['UUID']]
        except KeyError as e:
            logger.error(f"Task _id={t['_id']} :: {t['i']} :: ignoring KeyError :: %s", e)
            pass


def main(args):
    pdf_status = persistqueue.PDict(
        os.path.join(args.root, 'pdf.status'), 'pdf'
    )
    logger.info(f'Opened PDF Status Dict {pdf_status.path}')
    finalize_queue = persistqueue.SQLiteQueue(
        os.path.join(args.root, 'pdf.finalize')
    )
    logger.info(f'Opened Finalize Queue {finalize_queue.path}')
    logger.info(f'Connecting to {args.host}:{args.port} with provided credentials')
    conn = pymongo.MongoClient(
        host=args.host,
        port=args.port,
        username=os.environ.get('MONGODB_USERNAME'),
        password=os.environ.get('MONGODB_PASSWORD')
    )
    setup_rs(conn, logger)
    pdfs = conn[DB][PDFS]
    critical_fails_left = args.critical_errors
    logger.info(f'Started listening')
    while True:
        result = finalize_queue.get()
        try:
            finalize(result, pdfs, pdf_status)
        except pymongo.errors.PyMongoError as e:
            logger.error(f"Task _id={result['_id']} :: {result['i']} :: recoverable (restart) :: %s", e)
            finalize_queue.put(result)
            break
        except Exception as e:
            logger.critical(f"Task _id={result['_id']} :: {result['i']} :: {e}")
            if critical_fails_left == 0:
                raise e
            critical_fails_left -= 1
            finalize_queue.put(result)
            continue


if __name__ == '__main__':
    pargs = parser.parse_args()
    formatter = logging.Formatter('%(asctime)s :: %(name)s :: %(levelname)s - %(message)s')
    if pargs.log_to is not None:
        handle = logging.FileHandler(pargs.log_to)
    else:
        handle = logging.StreamHandler()
    handle.setFormatter(formatter)
    logger.addHandler(handle)
    if pargs.debug or os.environ.get('FEMIDA_DEBUG', False):
        logger.setLevel(logging.DEBUG)
    main(pargs)
