#!/usr/bin/env python3

import pymongo.errors
import argparse
import os
import cv2
import logging
import persistqueue
import datetime
import femida_detect
from filelock import FileLock


parser = argparse.ArgumentParser()
STATUS_IN_PROGRESS = 'OCR in progress'
STATUS_ERROR = 'OCR errored'
STATUS_COMPLETE = 'OCR complete'
STATUS_IN_QUEUE = 'in queue for OCR'
STATUS_PARTIALLY_COMPLETE = 'OCR partially complete'
ANSWERS = 'answers'
PDFS = 'pdfs'
DB = 'femida'

parser.add_argument('--host', type=str, default='localhost')
parser.add_argument('--port', type=int, default=27017)
parser.add_argument('--log-to', type=str,
                    help='path to logfile')
parser.add_argument('--root', type=str, required=True,
                    help='path to local queue')
parser.add_argument('--model-path', type=str, required=True)
parser.add_argument('--max-errors', type=int, default=1)
parser.add_argument('--critical-errors', type=int, default=2)
parser.add_argument('--save-path', type=str, default=os.environ.get('RESULTS_FOLDER', '/media/ocr_results/'))
parser.add_argument('--cuda', action='store_true')
parser.add_argument('--debug', action='store_true')
logger = logging.getLogger('consumer :: answers')


def finalize(t, pdfs, answers, queue, pdf_status):
    """
    This should be only called if the result is ready to submit
    This is also should be called with lock
    """
    all_tasks = set(range(t['total']))
    # some tasks are left
    if len(all_tasks - pdf_status[t['UUID']]):
        update = None
    # there are some errors
    elif len(pdf_status[t['UUID']] - all_tasks) > 0:
        if len(pdf_status[t['UUID']] - set(range(t['total']))) < t['total']:
            logger.info(f"Task _id={t['_id']} :: status :: {STATUS_PARTIALLY_COMPLETE}")
            update = {'$set': {'status': STATUS_PARTIALLY_COMPLETE}}
        else:
            logger.info(f"Task _id={t['_id']} :: status :: {STATUS_ERROR}")
            update = {'$set': {'status': STATUS_ERROR}}
    # it's all good
    else:
        logger.info(f"Task _id={t['_id']} :: status :: {STATUS_COMPLETE}")
        update = {'$set': {'status': STATUS_COMPLETE}}
    try:
        if update:
            pdfs.update_one(
                {'_id': t['_id']},
                update
            )
        answers.insert(t['result'])
    except pymongo.errors.PyMongoError as e:
        logger.error(f"Task _id={t['_id']} :: {t['i']} :: recoverable (restart) :: %s", e)
        queue.put(t)
        raise
    # ensure we've submitted all the results
    else:
        os.unlink(t['imagef'])
        if update:
            try:
                del pdf_status[t['UUID']]
            except KeyError as e:
                logger.error(f"Task _id={t['_id']} :: {t['i']} :: ignoring KeyError :: %s", e)
                pass


def handle_error(task, error, pdf_status, args):
    logger.error(f"Task _id={task['_id']} :: {task['i']} :: status :: error :: %s", error)
    task['errors'] += 1
    if task['errors'] > args.max_errors:
        pdf_status[task['UUID']] |= {task['i'], -task['i']}
        task['result'] = dict(
            personal=[],
            UUID=task['UUID'],
            requested_manual=[],
            manual_checks=[],
            test_results=[],
            test_updates=[],
            status='error'
        )
    else:
        logger.debug(f"Task _id={task['_id']} :: retry {task['errors']}/{args.max_errors}")


def main(args):
    logger.info(f'storing ocr results here: {args.save_path}')
    os.makedirs(args.save_path, exist_ok=True)
    queue = persistqueue.SQLiteQueue(
        os.path.join(args.root, 'answers'))
    logger.info(f'Opened Answers Queue {queue.path}')
    pdf_status = persistqueue.PDict(
        os.path.join(args.root, 'pdf.status'), 'pdf'
    )
    lock = FileLock(os.path.join(args.root, 'pdf.status', 'lock'))
    logger.info(f'Opened PDF Status Dict {pdf_status.path}')
    logger.info(f'Connecting to {args.host}:{args.port} with provided credentials')
    conn = pymongo.MongoClient(
        host=args.host,
        port=args.port,
        username=os.environ.get('MONGODB_USERNAME'),
        password=os.environ.get('MONGODB_PASSWORD')
    )
    pdfs = conn[DB][PDFS]
    answers = conn[DB][ANSWERS]
    logger.info(f'Loading model from {args.model_path}')
    predict = femida_detect.detect.eval.load(args.model_path, ('cuda' if args.cuda else 'cpu'))
    logger.info(f'Started listening')
    critical_fails_left = args.critical_errors
    while True:
        task = queue.get()
        try:
            logger.info(f"Got new task _id={task['_id']} :: {task['i']}")
            if 'result' in task:
                with lock:
                    finalize(task, pdfs, answers, queue, pdf_status)
                continue
            image = cv2.imread(task['imagef'])
            test_results = dict.fromkeys(list(map(str, range(1, 41))), '')
            test_updates = [{
                'sessoin_id': 'ocr', 'updates': {}, 'date': datetime.datetime.now()}
            ]
            result = dict(
                personal=[],
                UUID=task['UUID'],
                requested_manual=[],
                manual_checks=[],
                test_results=test_results,
                test_updates=test_updates
            )
            logger.debug(f"Task _id={task['_id']} :: {task['i']} :: CroppedAnswers.from_raw")
            cropped = femida_detect.imgparse.CroppedAnswers.from_raw(image)
            img_fio = os.path.join(args.save_path, f"{task['UUID']}__{task['i']}_fio.jpg")
            orig = cropped.personal
            h, w, _ = orig.shape
            cv2.imwrite(
                img_fio,
                cv2.resize(orig, (1000, 1000 * h // w))
            )
            result['img_fio'] = img_fio
            logger.debug(f"Task _id={task['_id']} :: {task['i']} :: predict(cropped)")
            predictions = predict(cropped)
            logger.debug(f"Task _id={task['_id']} :: {task['i']} :: cropped.plot_predicted(predictions)")
            inpainted = cropped.plot_predicted(predictions, only_answers=True)
            img_test_form = os.path.join(args.save_path, f"{task['UUID']}__{task['i']}_test_form.jpg")
            h, w, _ = inpainted.shape
            cv2.imwrite(
                img_test_form,
                cv2.resize(inpainted, (1000, 1000 * h // w))
            )
            result['img_test_form'] = img_test_form
            for (j, letter), pred in zip(
                    cropped.get_labels(),
                    predictions
            ):
                if pred:
                    test_results[str(j)] += letter
            logger.info(f"Task _id={task['_id']} :: {task['i']} :: status :: normal")
            result.update(status='normal')
            task['result'] = result
            pdf_status[task['UUID']] |= {task['i']}
            with lock:
                finalize(task, pdfs, answers, queue, pdf_status)
        except pymongo.errors.PyMongoError:
            break
        except cv2.error as e:
            handle_error(task, e, pdf_status, args)
            if 'result' in task:
                with lock:
                    finalize(task, pdfs, answers, queue, pdf_status)
            else:
                queue.put(task)
            continue
        except Exception as e:
            logger.critical(f"Task _id={task['_id']} :: {task['i']} :: {e}")
            if critical_fails_left == 0:
                queue.put(task)
                raise
            critical_fails_left -= 1
            handle_error(task, e, pdf_status, args)
            if 'result' in task:
                with lock:
                    finalize(task, pdfs, answers, queue, pdf_status)
            else:
                queue.put(task)
            continue


if __name__ == '__main__':
    pargs = parser.parse_args()
    formatter = logging.Formatter('%(asctime)s :: %(name)s :: %(levelname)s - %(message)s')
    if pargs.log_to is not None:
        handle = logging.FileHandler(pargs.log_to)
    else:
        handle = logging.StreamHandler()
    handle.setFormatter(formatter)
    logger.addHandler(handle)
    if pargs.debug:
        logger.setLevel(logging.DEBUG)
    main(pargs)
